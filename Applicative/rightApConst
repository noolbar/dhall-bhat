let Applicative = ./Type

let leftConst = ./../Functor/leftConst

let rightApConst
    :   ∀(f : Type → Type)
      → ∀(app : Applicative f)
      → ∀(a : Type)
      → ∀(b : Type)
      → f a
      → f b
      → f b
    =   λ(f : Type → Type)
      → λ(app : Applicative f)
      → λ(a : Type)
      → λ(b : Type)
      → λ(fa : f a)
      → λ(fb : f b)
      → let apConst = leftConst f app.{ map } (b → b) a (λ(x : b) → x) fa
        
        in  app.ap b b apConst fb

in  rightApConst
