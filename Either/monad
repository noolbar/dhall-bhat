let Monad = ./../Monad/Type

let Either = ./Type

in    λ(a : Type)
    →   ./../Monad/fromPureBind
          (Either a)
          (λ(b : Type) → λ(x : b) → < Right : b | Left : a >.Right x)
          (   λ(b : Type)
            → λ(c : Type)
            → λ(fa : Either a b)
            → λ(k : b → Either a c)
            → let map = (./functor a).map
              
              in  merge
                    { Left = λ(l : a) → < Left : a | Right : c >.Left l
                    , Right = λ(e : Either a c) → e
                    }
                    (map b (Either a c) k fa)
          )
      : Monad (Either a)
