let Monad = ./../Monad/Type

let map = (./functor).map

let concat =
        λ(a : Type)
      → λ(x : Optional (Optional a))
      → Optional/fold
          (Optional a)
          x
          (Optional a)
          (λ(y : Optional a) → y)
          (None a)

in      ./applicative
      ∧ { bind =
              λ(a : Type)
            → λ(b : Type)
            → λ(fa : Optional a)
            → λ(k : a → Optional b)
            → concat b (map a (Optional b) k fa)
        }
    : Monad Optional
